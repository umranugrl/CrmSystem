// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using crmSystem.Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(CrmDbContext))]
    partial class CrmDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("crmSystem.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Ana Cad.",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ahmet.yilmaz@ornek.com",
                            Name = "Ahmet Yılmaz",
                            Phone = "1234567890"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Meşe Sok.",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ayse.kaya@ornek.com",
                            Name = "Ayşe Kaya",
                            Phone = "0987654321"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Çam Yolu",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ali.vural@ornek.com",
                            Name = "Ali Vural",
                            Phone = "1111111111"
                        },
                        new
                        {
                            Id = 4,
                            Address = "321 Karaağaç Cd.",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "zeynep.demir@ornek.com",
                            Name = "Zeynep Demir",
                            Phone = "2222222222"
                        },
                        new
                        {
                            Id = 5,
                            Address = "654 Akçaağaç Sk.",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mehmet.kara@ornek.com",
                            Name = "Mehmet Kara",
                            Phone = "3333333333"
                        });
                });

            modelBuilder.Entity("crmSystem.Domain.Entities.Interaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InteractionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Interactions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            Date = new DateTime(2024, 7, 6, 12, 25, 26, 680, DateTimeKind.Local).AddTicks(1205),
                            Details = "İlk temas",
                            InteractionType = "E-posta"
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2,
                            Date = new DateTime(2024, 7, 11, 12, 25, 26, 680, DateTimeKind.Local).AddTicks(1239),
                            Details = "Takip çağrısı",
                            InteractionType = "Telefon"
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 3,
                            Date = new DateTime(2024, 7, 13, 12, 25, 26, 680, DateTimeKind.Local).AddTicks(1244),
                            Details = "Ürün tanıtımı",
                            InteractionType = "Toplantı"
                        },
                        new
                        {
                            Id = 4,
                            CustomerId = 4,
                            Date = new DateTime(2024, 7, 9, 12, 25, 26, 680, DateTimeKind.Local).AddTicks(1248),
                            Details = "Fiyat müzakeresi",
                            InteractionType = "E-posta"
                        },
                        new
                        {
                            Id = 5,
                            CustomerId = 5,
                            Date = new DateTime(2024, 7, 14, 12, 25, 26, 680, DateTimeKind.Local).AddTicks(1251),
                            Details = "Sözleşme görüşmesi",
                            InteractionType = "Telefon"
                        });
                });

            modelBuilder.Entity("crmSystem.Domain.Entities.Opportunity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("EstimatedValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OpportunityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Opportunities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            Description = "Yeni yazılım projesi",
                            EstimatedValue = 10000m,
                            OpportunityName = "Yeni Proje",
                            Status = "Açık"
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2,
                            Description = "İşletme için danışmanlık hizmetleri",
                            EstimatedValue = 5000m,
                            OpportunityName = "Danışmanlık Hizmeti",
                            Status = "Kapalı"
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 3,
                            Description = "Yazılım ürünü satışı",
                            EstimatedValue = 15000m,
                            OpportunityName = "Ürün Satışı",
                            Status = "Açık"
                        },
                        new
                        {
                            Id = 4,
                            CustomerId = 4,
                            Description = "Yıllık bakım anlaşması",
                            EstimatedValue = 7000m,
                            OpportunityName = "Bakım Anlaşması",
                            Status = "Açık"
                        },
                        new
                        {
                            Id = 5,
                            CustomerId = 5,
                            Description = "Özel yazılım geliştirme",
                            EstimatedValue = 20000m,
                            OpportunityName = "Yazılım Geliştirme",
                            Status = "Kapalı"
                        });
                });

            modelBuilder.Entity("crmSystem.Domain.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Requests", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            Details = "Teknik destek gerekli",
                            RequestType = "Destek",
                            Status = "Açık"
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2,
                            Details = "Ürün hakkında soru",
                            RequestType = "Soru",
                            Status = "Kapalı"
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 3,
                            Details = "Hizmet memnuniyetsizliği",
                            RequestType = "Şikayet",
                            Status = "Açık"
                        },
                        new
                        {
                            Id = 4,
                            CustomerId = 4,
                            Details = "Hizmet hakkında olumlu geri bildirim",
                            RequestType = "Geri Bildirim",
                            Status = "Kapalı"
                        },
                        new
                        {
                            Id = 5,
                            CustomerId = 5,
                            Details = "Yeni proje için teklif talebi",
                            RequestType = "Teklif Talebi",
                            Status = "Açık"
                        });
                });

            modelBuilder.Entity("crmSystem.Domain.Entities.Interaction", b =>
                {
                    b.HasOne("crmSystem.Domain.Entities.Customer", "Customer")
                        .WithMany("Interactions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("crmSystem.Domain.Entities.Opportunity", b =>
                {
                    b.HasOne("crmSystem.Domain.Entities.Customer", "Customer")
                        .WithMany("Opportunities")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("crmSystem.Domain.Entities.Request", b =>
                {
                    b.HasOne("crmSystem.Domain.Entities.Customer", "Customer")
                        .WithMany("Requests")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("crmSystem.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Interactions");

                    b.Navigation("Opportunities");

                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
